// <auto-generated />
using System;
using GoTravel.API.Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetTopologySuite.Geometries;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace GoTravel.API.Migrations
{
    [DbContext(typeof(GoTravelContext))]
    [Migration("20231205113619_Areas")]
    partial class Areas
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "postgis");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("GoTravel.API.Domain.Models.Database.GLLine", b =>
                {
                    b.Property<string>("LineId")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("LineModeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LineName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LineId");

                    b.HasIndex("LineModeId");

                    b.ToTable("Line", (string)null);
                });

            modelBuilder.Entity("GoTravel.API.Domain.Models.Database.GLLineMode", b =>
                {
                    b.Property<string>("LineModeName")
                        .HasColumnType("text");

                    b.Property<int?>("AreaId")
                        .HasColumnType("integer");

                    b.Property<string>("BrandingColour")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("LogoUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PrimaryColour")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SecondaryColour")
                        .HasColumnType("text");

                    b.HasKey("LineModeName");

                    b.HasIndex("AreaId");

                    b.ToTable("LineMode", (string)null);
                });

            modelBuilder.Entity("GoTravel.API.Domain.Models.Database.GLStopPoint", b =>
                {
                    b.Property<string>("StopPointId")
                        .HasColumnType("text");

                    b.Property<int?>("BikesAvailable")
                        .HasColumnType("integer");

                    b.Property<string>("BusStopIndicator")
                        .HasColumnType("text");

                    b.Property<string>("BusStopLetter")
                        .HasColumnType("text");

                    b.Property<string>("BusStopSMSCode")
                        .HasColumnType("text");

                    b.Property<int?>("EBikesAvailable")
                        .HasColumnType("integer");

                    b.Property<Point>("StopPointCoordinate")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<string>("StopPointHub")
                        .HasColumnType("text");

                    b.Property<string>("StopPointName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("StopPointParentId")
                        .HasColumnType("text");

                    b.Property<string>("StopPointType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StopPointId");

                    b.HasIndex("StopPointParentId");

                    b.ToTable("StopPoint", (string)null);
                });

            modelBuilder.Entity("GoTravel.API.Domain.Models.Database.GLStopPointLine", b =>
                {
                    b.Property<string>("StopPointId")
                        .HasColumnType("text");

                    b.Property<string>("LineId")
                        .HasColumnType("text");

                    b.Property<bool>("IsEnabled")
                        .HasColumnType("boolean");

                    b.HasKey("StopPointId", "LineId");

                    b.HasIndex("LineId");

                    b.ToTable("StopPointLine", (string)null);
                });

            modelBuilder.Entity("GoTravel.API.Domain.Models.Database.GTArea", b =>
                {
                    b.Property<int>("AreaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("AreaId"));

                    b.Property<Polygon>("AreaCatchment")
                        .IsRequired()
                        .HasColumnType("geometry");

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("AreaId");

                    b.ToTable("Area", (string)null);
                });

            modelBuilder.Entity("GoTravel.API.Domain.Models.Database.GLLine", b =>
                {
                    b.HasOne("GoTravel.API.Domain.Models.Database.GLLineMode", "LineMode")
                        .WithMany("Lines")
                        .HasForeignKey("LineModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("LineMode");
                });

            modelBuilder.Entity("GoTravel.API.Domain.Models.Database.GLLineMode", b =>
                {
                    b.HasOne("GoTravel.API.Domain.Models.Database.GTArea", "PrimaryArea")
                        .WithMany("LineModes")
                        .HasForeignKey("AreaId");

                    b.Navigation("PrimaryArea");
                });

            modelBuilder.Entity("GoTravel.API.Domain.Models.Database.GLStopPoint", b =>
                {
                    b.HasOne("GoTravel.API.Domain.Models.Database.GLStopPoint", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("StopPointParentId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("GoTravel.API.Domain.Models.Database.GLStopPointLine", b =>
                {
                    b.HasOne("GoTravel.API.Domain.Models.Database.GLLine", "Line")
                        .WithMany("StopPointLines")
                        .HasForeignKey("LineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("GoTravel.API.Domain.Models.Database.GLStopPoint", "StopPoint")
                        .WithMany("StopPointLines")
                        .HasForeignKey("StopPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Line");

                    b.Navigation("StopPoint");
                });

            modelBuilder.Entity("GoTravel.API.Domain.Models.Database.GLLine", b =>
                {
                    b.Navigation("StopPointLines");
                });

            modelBuilder.Entity("GoTravel.API.Domain.Models.Database.GLLineMode", b =>
                {
                    b.Navigation("Lines");
                });

            modelBuilder.Entity("GoTravel.API.Domain.Models.Database.GLStopPoint", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("StopPointLines");
                });

            modelBuilder.Entity("GoTravel.API.Domain.Models.Database.GTArea", b =>
                {
                    b.Navigation("LineModes");
                });
#pragma warning restore 612, 618
        }
    }
}
